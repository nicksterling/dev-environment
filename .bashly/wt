#!/usr/bin/env bash
# This script was generated by bashly 1.1.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

wt_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt - Webtop Docker Management Tool\n"
    echo

  else
    printf "wt - Webtop Docker Management Tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt COMMAND\n"
  printf "  wt [COMMAND] --help | -h\n"
  printf "  wt --version | -v\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Open the Webtop GUI in an electron window\n" "gui  "
  printf "  %s   Start the Webtop docker container\n" "start"
  printf "  %s   Stop the running Webtop Docker container\n" "stop "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

wt_gui_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt gui - Open the Webtop GUI in an electron window\n"
    echo

  else
    printf "wt gui - Open the Webtop GUI in an electron window\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt gui COMMAND\n"
  printf "  wt gui [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Start the Webtop GUI\n" "start"
  printf "  %s   Stop the Webtop GUI\n" "stop "
  printf "  %s   Build the Webtop GUI\n" "build"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_gui_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt gui start - Start the Webtop GUI\n"
    echo

  else
    printf "wt gui start - Start the Webtop GUI\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt gui start [OPTIONS]\n"
  printf "  wt gui start --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--os, -o OS (required)"
    printf "    The operating system to build for\n"
    printf "    Allowed: linux, darwin, win32\n"
    echo

    printf "  %s\n" "--arch, -a ARCH (required)"
    printf "    The architecture to build for\n"
    printf "    Allowed: x64, arm64\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_gui_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt gui stop - Stop the Webtop GUI\n"
    echo

  else
    printf "wt gui stop - Stop the Webtop GUI\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt gui stop\n"
  printf "  wt gui stop --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_gui_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt gui build - Build the Webtop GUI\n"
    echo

  else
    printf "wt gui build - Build the Webtop GUI\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt gui build [OPTIONS]\n"
  printf "  wt gui build --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--os, -o OS (required)"
    printf "    The operating system to build for\n"
    printf "    Allowed: linux, darwin, win32\n"
    echo

    printf "  %s\n" "--arch, -a ARCH (required)"
    printf "    The architecture to build for\n"
    printf "    Allowed: x64, arm64\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt start - Start the Webtop docker container\n"
    echo

  else
    printf "wt start - Start the Webtop docker container\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt start [OPTIONS]\n"
  printf "  wt start --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--env, -e ENV (repeatable)"
    printf "    Environment variables to pass to the docker compose command\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt stop - Stop the running Webtop Docker container\n"
    echo

  else
    printf "wt stop - Stop the running Webtop Docker container\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt stop [OPTIONS]\n"
  printf "  wt stop --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--delete-volumes, -d"
    printf "    Delete the volumes when stopping the container\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_colima_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt colima - Create or destroy a colima virtual machine\n"
    echo

  else
    printf "wt colima - Create or destroy a colima virtual machine\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt colima COMMAND\n"
  printf "  wt colima [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Show the status of the colima virtual machine\n" "status "
  printf "  %s   Create a colima virtual machine\n" "create "
  printf "  %s   Destroy the colima virtual machine\n" "destroy"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_colima_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt colima status - Show the status of the colima virtual machine\n"
    echo

  else
    printf "wt colima status - Show the status of the colima virtual machine\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt colima status\n"
  printf "  wt colima status --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_colima_create_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt colima create - Create a colima virtual machine\n"
    echo

  else
    printf "wt colima create - Create a colima virtual machine\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt colima create\n"
  printf "  wt colima create --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

wt_colima_destroy_usage() {
  if [[ -n $long_usage ]]; then
    printf "wt colima destroy - Destroy the colima virtual machine\n"
    echo

  else
    printf "wt colima destroy - Destroy the colima virtual machine\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wt colima destroy\n"
  printf "  wt colima destroy --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

wt_gui_start_command() {
  # if ${args[--os]} is darwin
  if [[ "${args[--os]}" == darwin ]]; then
      # Check to see if the executable exists
      if [[ ! -f ./.gui/bin/webtop-gui-darwin-${args[--arch]}/webtop-gui.app/Contents/MacOS/webtop-gui ]]; then
          echo "Error: ./.gui/bin/webtop-gui-darwin-${args[--arch]}/webtop-gui.app/Contents/MacOS/webtop-gui does not exist"
          exit 1
      fi
          # Run the command in ./.gui/bin/webtop-gui-darwin-${args[--arch]}/webtop-gui.app/Contents/MacOS/webtop-gui
      ./.gui/bin/webtop-gui-darwin-${args[--arch]}/webtop-gui.app/Contents/MacOS/webtop-gui
  fi

  # if ${args[--os]} is linux
  if [[ "${args[--os]}" == linux ]]; then
      # Check to see if the executable exists
      if [[ ! -f ./.gui/bin/webtop-gui-linux-${args[--arch]}/webtop-gui ]]; then
          echo "Error: ./.gui/bin/webtop-gui-linux-${args[--arch]}/webtop-gui does not exist"
          exit 1
      fi

      # Run the command in ./.gui/bin/webtop-gui-linux-${args[--arch]}/webtop-gui
      ./.gui/bin/webtop-gui-linux-${args[--arch]}/webtop-gui
  fi

  if [[ "${args[--os]}" == win32 ]]; then
      # Check to see if the executable exists
      if [[ ! -f ./.gui/bin/webtop-gui-win32-${args[--arch]}/webtop-gui.exe ]]; then
          echo "Error: ./.gui/bin/webtop-gui-win32-${args[--arch]}/webtop-gui.exe does not exist"
          exit 1
      fi

      # Run the command in ./.gui/bin/webtop-gui-win32-${args[--arch]}/webtop-gui.exe
      ./.gui/bin/webtop-gui-win32-${args[--arch]}/webtop-gui.exe
  fi

}

wt_gui_stop_command() {
  echo "Ummm... I haven't implemented that yet. You can just terminate the app manually."
}

wt_gui_build_command() {
  if ! docker image inspect nicksterling/wt-gui-builder:${version} &> /dev/null; then
      echo "Building nicksterling/wt-gui-builder:${version}"
      dockerfile="FROM alpine:latest\n"
      dockerfile+="RUN apk add --no-cache bash jq\n"

      docker buildx build --platform linux/amd64 -t nicksterling/wt-gui-builder:${version} ./.gui --load
  fi



  docker run --rm --platform linux/amd64 -it -v $(pwd)/.gui/bin:/app/bin nicksterling/wt-gui-builder:${version} npx electron-packager . webtop-gui --platform=${args[--os]} --arch=${args[--arch]} --out=./bin --overwrite

}

wt_start_command() {
  env_values="${args[--env]}"

  > .env-tmp

  IFS=' ' read -ra ADDR <<< "$env_values"
  for val in "${ADDR[@]}"; do
      val=${val//\"/}

      echo $val >> .env-tmp
  done

  docker-compose  --env-file .env-tmp up -d --force-recreate

  rm .env-tmp
}

wt_stop_command() {
  if [[ "${args[--delete-volumes]}" == 1 ]]; then
      docker compose down -v
  else
      docker compose down
  fi
}

wt_colima_status_command() {
  echo "# this file is located in 'src/colima_status_command.sh'"
  echo "# code for 'wt colima status' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

wt_colima_create_command() {
  colima start --arch aarch64 --vm-type=vz --vz-rosetta -c 8 -m 12 -d 100
}

wt_colima_destroy_command() {
  colima stop
}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        wt_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    gui)
      action="gui"
      shift
      wt_gui_parse_requirements "$@"
      shift $#
      ;;

    start)
      action="start"
      shift
      wt_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      wt_stop_parse_requirements "$@"
      shift $#
      ;;

    colima)
      action="colima"
      shift
      wt_colima_parse_requirements "$@"
      shift $#
      ;;

    "")
      wt_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_gui_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_gui_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  if command -v docker >/dev/null 2>&1; then
    deps['docker']="$(command -v docker | head -n1)"
  else
    printf "missing dependency: docker\n" >&2
    exit 1
  fi

  action=${1:-}

  case $action in
    -*) ;;

    start)
      action="start"
      shift
      wt_gui_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      wt_gui_stop_parse_requirements "$@"
      shift $#
      ;;

    build)
      action="build"
      shift
      wt_gui_build_parse_requirements "$@"
      shift $#
      ;;

    "")
      wt_gui_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_gui_start_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_gui_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="gui start"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --os | -o)

        if [[ -n ${2+x} ]]; then

          args['--os']="$2"
          shift
          shift
        else
          printf "%s\n" "--os requires an argument: --os, -o OS" >&2
          exit 1
        fi
        ;;

      --arch | -a)

        if [[ -n ${2+x} ]]; then

          args['--arch']="$2"
          shift
          shift
        else
          printf "%s\n" "--arch requires an argument: --arch, -a ARCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  if [[ -z ${args['--os']+x} ]]; then
    printf "missing required flag: --os, -o OS\n" >&2
    exit 1
  fi
  if [[ -z ${args['--arch']+x} ]]; then
    printf "missing required flag: --arch, -a ARCH\n" >&2
    exit 1
  fi

  if [[ ${args['--os']:-} ]] && [[ ! ${args['--os']:-} =~ ^(linux|darwin|win32)$ ]]; then
    printf "%s\n" "--os must be one of: linux, darwin, win32" >&2
    exit 1
  fi
  if [[ ${args['--arch']:-} ]] && [[ ! ${args['--arch']:-} =~ ^(x64|arm64)$ ]]; then
    printf "%s\n" "--arch must be one of: x64, arm64" >&2
    exit 1
  fi

}

wt_gui_stop_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_gui_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="gui stop"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_gui_build_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_gui_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="gui build"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --os | -o)

        if [[ -n ${2+x} ]]; then

          args['--os']="$2"
          shift
          shift
        else
          printf "%s\n" "--os requires an argument: --os, -o OS" >&2
          exit 1
        fi
        ;;

      --arch | -a)

        if [[ -n ${2+x} ]]; then

          args['--arch']="$2"
          shift
          shift
        else
          printf "%s\n" "--arch requires an argument: --arch, -a ARCH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  if [[ -z ${args['--os']+x} ]]; then
    printf "missing required flag: --os, -o OS\n" >&2
    exit 1
  fi
  if [[ -z ${args['--arch']+x} ]]; then
    printf "missing required flag: --arch, -a ARCH\n" >&2
    exit 1
  fi

  if [[ ${args['--os']:-} ]] && [[ ! ${args['--os']:-} =~ ^(linux|darwin|win32)$ ]]; then
    printf "%s\n" "--os must be one of: linux, darwin, win32" >&2
    exit 1
  fi
  if [[ ${args['--arch']:-} ]] && [[ ! ${args['--arch']:-} =~ ^(x64|arm64)$ ]]; then
    printf "%s\n" "--arch must be one of: x64, arm64" >&2
    exit 1
  fi

}

wt_start_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="start"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --env | -e)

        if [[ -n ${2+x} ]]; then

          if [[ -z ${args['--env']+x} ]]; then
            args['--env']="\"$2\""
          else
            args['--env']="${args['--env']} \"$2\""
          fi
          shift
          shift
        else
          printf "%s\n" "--env requires an argument: --env, -e ENV" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_stop_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="stop"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --delete-volumes | -d)

        args['--delete-volumes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_colima_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_colima_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  if command -v colima >/dev/null 2>&1; then
    deps['colima']="$(command -v colima | head -n1)"
  else
    printf "missing dependency: colima\n" >&2
    exit 1
  fi

  if command -v docker >/dev/null 2>&1; then
    deps['docker']="$(command -v docker | head -n1)"
  else
    printf "missing dependency: docker\n" >&2
    exit 1
  fi

  action=${1:-}

  case $action in
    -*) ;;

    status)
      action="status"
      shift
      wt_colima_status_parse_requirements "$@"
      shift $#
      ;;

    create)
      action="create"
      shift
      wt_colima_create_parse_requirements "$@"
      shift $#
      ;;

    destroy)
      action="destroy"
      shift
      wt_colima_destroy_parse_requirements "$@"
      shift $#
      ;;

    "")
      wt_colima_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_colima_status_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_colima_status_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="colima status"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_colima_create_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_colima_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="colima create"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

wt_colima_destroy_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wt_colima_destroy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="colima destroy"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

initialize() {
  version="0.1.1"
  long_usage=''
  set -e

  # ## Check if Docker is installed
  # if ! command -v docker &> /dev/null; then
  #     echo "Error: Docker is not installed"
  #     exit 1
  # fi

  # ## Check to see if the nicksterling/wt-helper image with tag ${version} exists
  # ##  If it does not exist, then let's build it
  # if ! docker image inspect nicksterling/wt-helper:${version} &> /dev/null; then
  #     echo "Building nicksterling/wt-helper:${version}"
  #     ## Define the Dockerfile in a variable by concatenating lines
  #     dockerfile="FROM alpine:latest\n"
  #     dockerfile+="RUN apk add --no-cache bash jq\n"

  #     ## Build the Docker image using the Dockerfile from the variable
  #     echo -e "$dockerfile" | docker build -t nicksterling/wt-helper:${version} -
  #     if [ $? -ne 0 ]; then
  #         echo "Failed to build nicksterling/wt-helper:${version}"
  #         exit 1
  #     fi
  # fi

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "gui") wt_gui_command ;;
    "gui start") wt_gui_start_command ;;
    "gui stop") wt_gui_stop_command ;;
    "gui build") wt_gui_build_command ;;
    "start") wt_start_command ;;
    "stop") wt_stop_command ;;
    "colima") wt_colima_command ;;
    "colima status") wt_colima_status_command ;;
    "colima create") wt_colima_create_command ;;
    "colima destroy") wt_colima_destroy_command ;;
  esac
}

initialize
run "$@"
